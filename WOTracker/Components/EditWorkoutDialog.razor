@using WOTracker.Models
@using WOTracker.DataAccess

@namespace WOTracker

<MudDialog>
    <DialogContent>

        <div style="display:flex; flex-direction:row; justify-content:space-between;">
            <div style="flex:7">
                <MudSelect style="max-width:180px;" T="string" Label="Musclegroups" FullWidth="false" MultiSelection="true" @bind-Value="_Value" @bind-SelectedValues="_SelectedMuscleGroups">
                    @foreach (var group in _Musclegroups)
                    {
                        <MudSelectItem style="width:150px;" T="string" Value="@group">@group</MudSelectItem>
                    }
                </MudSelect>
            </div>
            <div style="flex:1;">
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Style="color:darkred;" OnClick="Delete" />
            </div>
        </div>
        <MudTextField Class="mt-4" Lines=4 Clearable="true" Label="Notes" Variant="Variant.Outlined" @bind-Value="_Note" />

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [Inject] internal WOTrackerDbContext DbContext { get; set; } = default!;
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public DateTime Date { get; set; }
    [Parameter] public WorkoutDay WorkoutDay { get; set; } = new WorkoutDay();
    [Parameter] public EventCallback<(WorkoutDay, string)> OnDialogClosed { get; set; }


    private string _Value { get; set; }
    private List<string> _Musclegroups { get; set; }
    private string _Note { get; set; }
    private IEnumerable<string> _SelectedMuscleGroups { get; set; } = new HashSet<string>();

    private async Task Submit()
    {

        var itemToChange = DbContext.WorkoutDays.FirstOrDefault(wd => wd.Date == Date);
        DbContext.WorkoutDays.Remove(itemToChange!);
        await DbContext.SaveChangesAsync();

        if (itemToChange != null)
        {
            itemToChange.Comment = _Note ?? "";
            itemToChange.Groups = _SelectedMuscleGroups.Select(mg => new MuscleGroup { Musclegroup = Enum.Parse<Musclegroups>(mg) }).ToList();
            await DbContext.AddAsync(itemToChange);
            await DbContext.SaveChangesAsync();
        }

        await OnDialogClosed.InvokeAsync((itemToChange, "update")!);
        MudDialog.Close(DialogResult.Ok(true));
    }

    private async Task Delete()
    {
        var itemToDelete = DbContext.WorkoutDays.FirstOrDefault(wd => wd.Date == Date);
        DbContext.WorkoutDays.Remove(itemToDelete!);
        await DbContext.SaveChangesAsync();
        await OnDialogClosed.InvokeAsync((itemToDelete, "delete")!);
        MudDialog.Close(DialogResult.Ok(true));
    }

    protected override void OnInitialized()
    {
        _SelectedMuscleGroups = WorkoutDay.Groups.Select(wdmg => wdmg.Musclegroup.ToString());
        _Note = WorkoutDay.Comment ?? "";

        _Musclegroups = new List<string>
        {
            "Abs",
            "Arms",
            "Back",
            "Backside",
            "Cardio",
            "Chest",
            "Core",
            "Fullbody",
            "Frontside",
            "Legs",
            "Shoulders"
        };

    }

    private void Dispose()
    {
        MudDialog.Dispose();
    }

}